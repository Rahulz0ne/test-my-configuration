apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'no.nils.wsdl2java'
apply plugin: 'io.spring.dependency-management'
version = hasProperty('app.version') ? getProperty('app.version') : '0.0.1-SNAPSHOT'
description = 'Email publisher'
sourceCompatibility = 11
targetCompatibility = 11
buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
        springCloudVersion = 'Hoxton.SR1'
        springCloudVaultVersion = '2.2.4.RELEASE'
    }
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE")
        classpath("com.kenshoo:gradle-fpm:0.5")
        classpath("no.nils:wsdl2java:0.12")
    }
}
def repoCredentials = {
    username = project.property('repositoryUsername')
    password = project.property('repositoryPassword')
}
repositories {
    mavenCentral()
    maven {
        credentials(repoCredentials)
    }
}
dependencies {
    implementation platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation ("org.springframework.cloud:spring-cloud-starter-vault-config")
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-archaius")
            {
                exclude group: 'com.amazonaws', module: 'aws-java-sdk-core'
                exclude group: 'com.amazonaws', module: 'aws-java-sdk-s3'
            }
    implementation("org.mariadb.jdbc:mariadb-java-client:1.3.7")
    implementation ('commons-collections:commons-collections:3.2.2')
    implementation ('commons-lang:commons-lang:2.6')
    implementation ('commons-configuration:commons-configuration:1.10')
    implementation("a_customer_customerDTO:customerDTO:0.0.1.155")
    implementation 'ch.qos.logback:logback-classic:1.2.7'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.7'
    implementation 'junit:junit:4.13.1'
    runtimeOnly("org.codehaus.groovy:groovy:2.4.21")
    implementation "io.dropwizard.metrics:metrics-core:3.1.2"
    implementation "io.dropwizard.metrics:metrics-graphite:3.1.2"
    implementation("io.dropwizard.metrics:metrics-jvm:3.1.2")
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    implementation(files(wsdl2java.a).builtBy(wsdl2java))
    implementation(files(wsdl2java.b).builtBy(wsdl2java))
    implementation(files(wsdl2java.c).builtBy(wsdl2java))
    implementation(files(wsdl2java.d).builtBy(wsdl2java))
}
war {
    archiveName = "ROOT.war"
    destinationDir = new File("${rootDir}/runway/FS_ROOT/opt/tomcat/webapps")
}
packaging.extraOptions << [ '--after-install': "${rootDir}/runway/after-install.sh" ]















